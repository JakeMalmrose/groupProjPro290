
services:
# ----------------- Service Containers -----------------
  frontend-service:
    image: frontend:latest
    build:
      context: ./frontend-service-go
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - VaporNet
    depends_on:
      - traefik
    environment:
      - CONSUL_ADDRESS=consul:8500
      - SERVICE_NAME=frontend-service
      - SERVICE_ID=frontend-service-1
      - SERVICE_PORT=3000
      - TRAEFIK_ENABLE=true
      - TRAEFIK_HTTP_ROUTERS_FRONTEND_RULE=PathPrefix(`/frontend`)
      - TRAEFIK_HTTP_SERVICES_FRONTEND_LOADBALANCER_SERVER_PORT=3000

  # PRO290VaporGameAPI:
  #   build: ./PRO290VaporGameAPI
  #   image: vaporgameapi
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - VaporNet

  games-service:
    build: ./games-service-go
    container_name: games-service
    ports:
      - "8080"
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_REGION=us-west-2
      - DYNAMODB_ENDPOINT=http://VaporGameDynamoDB:8000
      - CONSUL_ADDRESS=consul:8500
      - SERVICE_NAME=games-service
      - SERVICE_ID=games-service-1
      - SERVICE_PORT=8080
      - TRAEFIK_ENABLE=true
      - TRAEFIK_HTTP_ROUTERS_GAMES_RULE=PathPrefix(`/games`)
      - TRAEFIK_HTTP_SERVICES_GAMES_LOADBALANCER_SERVER_PORT=8080
    depends_on:
      - VaporGameDynamoDB
    networks:
      - VaporNet     
    # deploy:
    #   mode: replicated
    #   replicas: 3

    
  carts-service:
    build: ./carts-service-go
    container_name: carts-service
    ports:
      - "8888:8080"
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_REGION=us-west-2
      - DYNAMODB_ENDPOINT=http://VaporCartDynamoDB:8000
    depends_on:
      - VaporCartDynamoDB
      - consul
      - traefik
    networks:
      - VaporNet     
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.carts.rule=PathPrefix(`/carts`)"
      - "traefik.http.services.carts.loadbalancer.server.port=8080"
    # depends_on:
    #   - VaporDBdynamo
    # deploy:
    #   mode: replicated
    #   replicas: 3




# ----------------- Database Containers -----------------
  VaporGameDynamoDB:
    image: amazon/dynamodb-local:latest
    container_name: VaporGameDynamoDB
    ports:
      - "8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    volumes:
      - "./dynamodb_data/game:/home/dynamodblocal/data"
    networks:
      - VaporNet
  
  VaporCartDynamoDB:
    image: amazon/dynamodb-local:latest
    container_name: VaporCartDynamoDB

    ports:
      - "8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    volumes:
      - "./dynamodb_data/cart:/home/dynamodblocal/data"
    networks:
      - VaporNet

  # ----- Init DynamoDB Tables -----

  VaporGameDynamoDB-init:
    depends_on:
      - VaporGameDynamoDB
    image: amazon/aws-cli
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: admin
    command: >-
      dynamodb create-table
          --table-name Games
          --attribute-definitions
              AttributeName=ID,AttributeType=S
          --key-schema
              AttributeName=ID,KeyType=HASH
          --billing-mode PAY_PER_REQUEST
          --endpoint-url http://VaporGameDynamoDB:8000 --region us-west-2
    networks:
      - VaporNet

  VaporCartDynamoDB-init:
    depends_on:
      - VaporCartDynamoDB
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: admin
    command: >-
      dynamodb create-table
          --table-name Carts
          --attribute-definitions
              AttributeName=ID,AttributeType=S
          --key-schema
              AttributeName=ID,KeyType=HASH
          --billing-mode PAY_PER_REQUEST
          --endpoint-url http://VaporCartDynamoDB:8000 --region us-west-2
    networks:
      - VaporNet

  
# ----------------- Registry and Gateway -----------------
  consul:
    image: consul:1.12.2
    ports:
      - "8500:8500"
    networks:
      - VaporNet
    restart: on-failure
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
        - '--api.insecure=true'
        - '--providers.consulcatalog=true'
        - '--providers.consulcatalog.prefix=traefik'
        - '--providers.consulcatalog.endpoint.address=consul:8500'
        - '--serversTransport.insecureSkipVerify=true'
        - '--entryPoints.web.address=:80'
        - '--log.level=DEBUG'
    ports:
      - 80:80
      - 8080:8080
    restart: always
    networks:
      - VaporNet
  # SEN300EurekaLightRegistry:
  #   container_name: SEN300EurekaLightRegistry
  #   image: steeltoeoss/eureka-server:latest
  #   # restart: always
  #   hostname: SEN300EurekaLightRegistry
  #   ports:
  #     - "8762:8761"
  #   networks:
  #     - VaporNet

  # SEN300LightAPIOcelotGateway:
  #   container_name: SEN300LightAPIOcelotGateway
  #   build:
  #     context: ./dotnet-apigateway-ocelot
  #     dockerfile: Dockerfile
  #   image: sen300ocelotgatewayapi:1
  #   # restart: always
  #   hostname: SEN300LightAPIOcelotGateway
  #   ports:
  #     - "5042:8080"
  #   networks:
  #     - VaporNet
  #   depends_on:
  #     - SEN300EurekaLightRegistry

# ----------------- Kafka and Zookeeper -----------------
  Zookeeper:  
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2182:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - VaporNet

  Kafka: 
    image: 'bitnami/kafka:latest'
    restart: always
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=Zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://Kafka:9092
    depends_on:
      - Zookeeper
    networks:
      - VaporNet
# ------------------------- EMAIl ------------------------

  # Emailer:  #Kafka Message consumer
  #   build: ./email_service
  #   restart: always
  #   image: email_service
  #   ports:
  #     - 0000:8080
  #   depends_on:
  #     - Kafka
  #   networks:
  #     - VaporNet

networks:
  VaporNet:
    external: false
  
volumes:
  dynamodb_data:
